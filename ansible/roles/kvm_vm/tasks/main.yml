---
- name: Install KVM and create VM
  block:
    - name: Install libvirt packages (For Ubuntu)
      ansible.builtin.package:
        name: "{{ common_packages + ubuntu_packages }}"
        state: present
      when: ansible_distribution == "Ubuntu"
    
    - name: Install libvirt packages (For RHEL)
      ansible.builtin.package:
        name: "{{ common_packages + rhel_packages }}"
        state: present
      when: ansible_distribution == "RedHat"

    - name: pip install lxml
      ansible.builtin.pip:
        name: lxml
        executable: pip3

    - name: Start and enable libvirtd service
      ansible.builtin.service:
        name: libvirtd
        state: started
        enabled: yes

    - name: Start and enable TuneD service
      ansible.builtin.service:
        name: tuned
        enabled: yes
        state: started

    - name: Generate SSH key pair
      community.crypto.openssh_keypair:
        path: "{{ ssh_key_path }}"
        type: rsa
        size: 4096
        force: true
        state: present
      register: ssh_key

    - name: Save the public key into a file
      ansible.builtin.copy:
        content: "{{ ssh_key.public_key }}"
        dest: "{{ ssh_pub_key_path }}"

    - name: Create storage directory
      ansible.builtin.file:
        path: /var/lib/libvirt/images
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Check if CentOS Stream 9 image exists
      ansible.builtin.stat:
        path: "{{ backup_vm_disk_path }}"
      register: image_stat

    - name: Download CentOS Stream 9 image
      ansible.builtin.get_url:
        url: "{{ vm_image_url }}"
        dest: "{{ backup_vm_disk_path }}"
      when: not image_stat.stat.exists

    - name: Copy the backup vm disk to become the VM disk
      ansible.builtin.command: cp "{{ backup_vm_disk_path }}" "{{ vm_disk_path }}"

    - name: resize image to 200G
      ansible.builtin.command: qemu-img resize "{{ vm_disk_path }}" +200G

    - name: Create cloud-init config
      ansible.builtin.template:
        src: cloud_init_config.yml.j2
        dest: "{{ cloud_init_config_path }}"
      vars:
        vm_ssh_public_key: "{{ ssh_key.public_key }}"

    - name: Copy the meta-data
      ansible.builtin.copy:
        src: meta-data
        dest: /tmp/meta-data

    - name: Copy the cloud-init script
      ansible.builtin.copy:
        src: cloud-init-script.sh
        dest: /tmp/cloud-init-script.sh

    - name: Use virt-customize to inject ssh key
      ansible.builtin.command: >
        virt-customize -a "{{ vm_disk_path }}" --hostname {{ vm_name }} --selinux-relabel
        --root-password password:{{ vm_password }} --ssh-inject 'root:file:{{ ssh_pub_key_path }}'
        --upload "{{ cloud_init_config_path }}":/tmp/user-data --upload /tmp/meta-data:/tmp/meta-data --run /tmp/cloud-init-script.sh

    - name: Use virt-customize to fdisk to resize disk
      ansible.builtin.command: virt-customize -a "{{ vm_disk_path }}" --run-command 'echo -e "d\nn\np\n1\n\n\nw" | fdisk /dev/sda'

    - name: Create a VM
      community.libvirt.virt:
        name: "{{ vm_name }}"
        command: define
        xml: "{{ lookup('template', 'vm_template.xml.j2') }}"
        uri: qemu:///system

    - name: Start the VM
      community.libvirt.virt:
        name: "{{ vm_name }}"
        state: running
        uri: qemu:///system

    - name: Sleep 30 seconds to allow the VM to boot
      ansible.builtin.pause:
        seconds: 30

    - name: Create custom TuneD profile directory
      ansible.builtin.file:
        path: /etc/tuned/cpu-pinning
        state: directory

    - name: Create custom TuneD profile configuration
      ansible.builtin.template:
        src: tuned.conf.j2
        dest: /etc/tuned/cpu-pinning/tuned.conf

    - name: Apply CPU Partitioning Profile
      ansible.builtin.command: tuned-adm profile cpu-pinning

    - name: Get the VM IP address using virsh domifaddr
      ansible.builtin.shell: virsh -c qemu:///system domifaddr {{ vm_name }} | grep ipv4 | awk '{print $4}' | cut -d'/' -f1
      register: domifaddr_output

    - name: Parse the VM IP address
      ansible.builtin.set_fact:
        vm_ip: "{{ domifaddr_output.stdout }}"

    - name: Set the VM name
      ansible.builtin.set_fact:
        vm_name: "{{ vm_name }}"

    - name: Set the VM user
      ansible.builtin.set_fact:
        vm_user: "{{ vm_user }}"

    - name: Set the VM ssh key path
      ansible.builtin.set_fact:
        ssh_key_path: "{{ ssh_key_path }}"

    - name: Display the VM IP address
      ansible.builtin.debug:
        msg: "The IP address of the VM is {{ vm_ip }}"

    - name: Wait for VM to be reachable
      ansible.builtin.wait_for:
        host: "{{ vm_ip }}"
        port: 22
        delay: 10
        timeout: 60
      register: vm_reachable

    - name: Test the connection to the VM
      delegate_to: "{{ vm_ip }}"
      vars:
        ansible_user: "{{ vm_user }}"
        ansible_ssh_private_key_file: /tmp/vm_ssh_key
      block:
        - name: Test the connection to the VM
          ansible.builtin.command: uname -a
          register: host_output

        - name: Display the output of the command
          ansible.builtin.debug:
            msg: "The output of the command is {{ host_output.stdout }}"

    - name: Add or replace VM name into /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ vm_ip }} {{ vm_name }}"
        create: yes

    - name: Test ssh to the VM by ssh to the VM by name
      ansible.builtin.wait_for:
        host: "{{ vm_name }}"
        port: 22
        delay: 10
        timeout: 60
      register: ssh_reachable 

  rescue:
    - name: Destroy the VM
      community.libvirt.virt:
        name: "{{ vm_name }}"
        state: destroyed
        uri: qemu:///system

    - name: Fail the playbook
      ansible.builtin.fail:
        msg: "An error occurred during the playbook execution. The VM and its associated resources have been cleaned up."
