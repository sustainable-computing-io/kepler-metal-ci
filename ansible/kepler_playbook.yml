- name: Setup Kepler
  hosts: "{{ target_host | default('all') }}"
  become: yes
  tasks:
    - name: Install podman
      ansible.builtin.dnf:
        name: podman
        state: present

    - name: Create Kepler systemd unit file
      copy:
        content: |
          [Unit]
          Description=Podman container-kepler.service
          Documentation=man:podman-generate-systemd(1)
          Wants=network-online.target
          After=network-online.target
          RequiresMountsFor=%t/containers

          [Service]
          Environment=PODMAN_SYSTEMD_UNIT=%n
          Restart=always
          TimeoutStopSec=70
          ExecStartPre=/bin/rm -f %t/%n.ctr-id
          ExecStart=/usr/bin/podman run --cidfile=%t/%n.ctr-id --cgroups=no-conmon --rm --sdnotify=conmon -d --replace --name kepler \
              --privileged --network=host --pid=host --rm -e EXPOSE_ESTIMATED_IDLE_POWER_METRICS="true" \
              -e ENABLE_PROCESS_METRICS="true" -v /lib/modules:/lib/modules -v /usr/src:/usr/src -v /sys/:/sys/ -v /proc:/proc -v /etc:/etc \
              --log-driver=k8s-file --log-opt path=/tmp/kepler.log \
              quay.io/sustainable_computing_io/kepler:latest -v=1
          ExecStop=/usr/bin/podman stop --ignore --cidfile=%t/%n.ctr-id
          ExecStopPost=/usr/bin/podman rm -f --ignore --cidfile=%t/%n.ctr-id
          Type=notify
          NotifyAccess=all

          [Install]
          WantedBy=multi-user.target default.target
        dest: /etc/systemd/system/container-kepler.service

    - name: Create /tmp/kepler.log
      ansible.builtin.file:
        path: /tmp/kepler.log
        state: touch

    - name: Change permissions of /tmp/kepler.log
      ansible.builtin.file:
        path: /tmp/kepler.log
        mode: 0755

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable and start Kepler service
      ansible.builtin.systemd:
        name: container-kepler
        enabled: yes
        state: started

    - name: Wait for Kepler to start (retry logic)
      ansible.builtin.shell: |
        for i in {1..5}; do
          echo "Attempt $i"
          ret=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8888/metrics --max-time 10 --connect-timeout 10 || true)
          if [ ${ret} -eq 200 ]; then
            exit 0
          fi
          sleep 5
        done
        echo "Kepler did not start in time"
        exit 1
      register: kepler_start
      failed_when: kepler_start.rc != 0

    - name: Dump Kepler metrics
      ansible.builtin.shell: curl -s http://localhost:8888/metrics | grep ^kepler_
      register: kepler_metrics

    - ansible.builtin.debug:
        var: kepler_metrics.stdout_lines

    - name: Install stress-ng
      ansible.builtin.dnf:
        name: stress-ng
        state: present
