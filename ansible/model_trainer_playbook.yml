- name: Run Model Trainer
  hosts: model_trainer
  become: yes

  tasks:
    - name: yum install stress-ng, git and python3.11
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - git
        - python3.11
        - python3.11-pip
        - stress-ng
    
    - name: Install Hatch
      ansible.builtin.shell: |
        export PATH=$PATH:/usr/local/bin
        pip3.11 install hatch

    - name: Verify Hatch Installation
      ansible.builtin.shell: |
        export PATH=$PATH:/usr/local/bin
        echo $PATH
        hatch --version

    - name: Clone Model Server
      ignore_errors: true
      ansible.builtin.git:
        repo: "{{ model_server_repo }}"
        dest: "{{ model_server_path }}"
        version: main
        force: false

    - name: Clone Kepler
      ignore_errors: true
      ansible.builtin.git:
        repo: "{{ kepler_repo }}"
        dest: "{{ kepler_path }}"
        version: main
        force: false

    - name: Train Models
      vars:
        vm_user: "{{ hostvars['localhost']['ssh_tunnel_user'] }}"
        vm_name: "{{ hostvars['localhost']['ssh_tunnel_vm'] }}"
        ssh_key_path: "{{ hostvars['localhost']['ssh_key_path'] }}"
      ansible.builtin.shell: |
        export PATH=$PATH:/usr/local/bin
        echo $PATH
        echo $DATAPATH
        mkdir -p "$DATAPATH"
        echo $MODEL_PATH
        mkdir -p "$MODEL_PATH"
        echo {{ model_export_path }}
        mkdir -p {{ model_export_path }}
        touch {{ model_export_path }}/train_logs.log

        # scp the stress_test_script to the VM
        scp -i {{ ssh_key_path }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ stress_test_script_path }} {{ vm_user }}@{{ vm_name }}:/tmp/stress_test.sh

        # Stress
        chmod +x {{ stress_test_script_path }}
        export START_TIME=$(date +%s)
        echo "total runtime seconds: {{ total_runtime_seconds }}"
        for i in {1..{{ stress_iterations }}}; do
          echo "Iteration: $i"
          # ssh to the vm and run the stress_test_script
          ssh -i {{ ssh_key_path }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ vm_user }}@{{ vm_name }} /tmp/stress_test.sh -t {{ total_runtime_seconds }}
        done 
        export END_TIME=$(date +%s)

        export INTERVAL=$((END_TIME - START_TIME))
        echo $INTERVAL

        echo "START TIME: ${START_TIME}" >> {{ model_export_path }}/train_logs.log
        echo "END_TIME: ${END_TIME}" >> {{ model_export_path }}/train_logs.log
        echo "LENGTH: ${INTERVAL}" >> {{ model_export_path }}/train_logs.log
        echo >> {{ model_export_path }}/train_logs.log
        cd {{ model_server_path }}

        # Collect
        echo -e "Query Prom Data\n" >> {{ model_export_path }}/train_logs.log
        hatch run python cmd/main.py query \
          --benchmark $BENCHMARK \
          --server $PROM_URL \
          --output kepler_query \
          --interval $INTERVAL \
          --vm-train \
          --id $COLLECT_ID >> {{ model_export_path }}/train_logs.log 2>&1

        # Train
        echo -e "Train Models\n" >> {{ model_export_path }}/train_logs.log
        hatch run python cmd/main.py train \
          --pipeline-name $PIPELINE_NAME \
          --vm-train \
          -e trained_power_model \
          --input kepler_query --id $COLLECT_ID >> {{ model_export_path }}/train_logs.log 2>&1

        
        # Move to Models Directory

        mv $MODEL_PATH/$PIPELINE_NAME/trained_power_model/* {{ model_export_path }}
      
      environment:
        BENCHMARK: "{{ benchmark }}"
        PROM_URL: "{{ prom_url }}"
        COLLECT_ID: "{{ collect_id }}"
        DATAPATH: "{{ data_path }}"
        MODEL_PATH: "{{ model_path }}"
        PIPELINE_NAME: "{{ pipeline_name }}"