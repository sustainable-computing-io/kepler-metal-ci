name: Equinix k8s Action integration with scalability benchmark suite

on:
  push:
  workflow_dispatch:
    inputs:
      termination_time:
        description: 'Cluster termination time in hours after now'
        required: true
        default: '1'
      control_plan:
        description: 'control plane machine type'
        required: false
        default: 'c3.small.x86'
      node_plan:
        description: 'node machine type'
        required: false
        default: 'c3.small.x86'
      metro:
        description: 'metro location'
        required: false
        default: 'da'

permissions:
  pull-requests: write
  contents: write
  repository-projects: write
  packages: write


jobs:
  Create-k8s-cluster:
    name: "Create Cluster"
    runs-on: ubuntu-latest

    steps:
      - name: Validate termination time
        run: |
          if [ ${{ github.event.inputs.termination_time || '1' }} -gt 48 ]; then
            echo "Error: Termination time cannot be more than 48 hours."
            exit 1
          fi

      - name: Install ansible, git and jq
        run: |
          sudo apt-get update
          sudo apt-get install ansible jq git -y

      - name: Clone repo
        run: |
          cd ~
          git clone https://github.com/sustainable-computing-io/kepler-metal-ci

      - name: Save ssh key from env to file
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EQUINIX_SSH_KEY }}" > ~/.ssh/kepler_ci
          chmod 600 ~/.ssh/kepler_ci
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Create metal config
        run: |
          cat <<EOF > /tmp/metal.yaml
          token: "${{ secrets.METAL_AUTH_TOKEN }}"
          project-id: ${{ secrets.EQUINIX_PROJECT_ID }}
          EOF

      - name: Play k8s_kubeadm.yml
        env:
          metro: "da"
          plan: "c3.small.x86"
          os: "rhel_9"
        run: |
          mkdir -p ~/.ansible
          echo '[defaults]' > ~/.ansible/ansible.cfg
          echo 'callback_plugins = ~/.github/callback_plugins' >> ~/.ansible/ansible.cfg
          echo 'callback_whitelist = mask_ip_callback' >> ~/.ansible/ansible.cfg
          mkdir -p ~/.github/callback_plugins
          cd ~/kepler-metal-ci
          cp ansible/mask_ip_callback.py ~/.github/callback_plugins/mask_ip_callback.py
          # save input var into extra-vars.yaml
          echo "termination_time: ${{ github.event.inputs.termination_time || '1' }}" > /tmp/extra-vars.yaml
          echo "control_plan: ${{ github.event.inputs.control_plan || 'c3.small.x86' }}" >> /tmp/extra-vars.yaml
          echo "node_plan: ${{ github.event.inputs.node_plan || 'c3.small.x86' }}" >> /tmp/extra-vars.yaml
          echo "metro: ${{ github.event.inputs.metro || 'da' }}" >> /tmp/extra-vars.yaml
          ansible-playbook ansible/k8s_kubeadm.yml \
            --extra-vars "@/tmp/extra-vars.yaml" 2>&1 >> k8s_kubeadm.log
          sudo cat /tmp/kubeconfig |jq -r '.stdout' > /tmp/k8sconfig
          sudo mv /tmp/k8sconfig /tmp/kubeconfig

      - name: Upload kubeconfig
        uses: actions/upload-artifact@v2
        with:
          name: kubeconfig-${{ github.run_id }}
          path: /tmp/kubeconfig
          retention-days: 1

  Run-Benchmark:
    name: "Run Benchmark"
    needs: create-k8s-cluster
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: mkdir tmp dirs
        run: |
          mkdir -p /tmp/kubeconfig
          mkdir -p ~/.kube/

      - name: Download kubeconfig
        uses: actions/download-artifact@v2
        with:
          name: kubeconfig-${{ github.run_id }}
          path: ~/.kube/

      - name: Test k8s
        run: |
          ls -la ~/.kube/*
          cp ~/.kube/kubeconfig ~/.kube/config
          cp ~/.kube/kubeconfig /tmp/kubeconfig/config
          kubectl get nodes
          kubectl get pods --all-namespaces

      - name: Label workers
        run: |
          kubectl label node $(kubectl get nodes --selector=node-role.kubernetes.io/control-plane!= --no-headers -o custom-columns=":metadata.name") node-role.kubernetes.io/worker=

      - name: Install ansible, git and jq
        run: |
          sudo apt-get update
          sudo apt-get install jq -y
      
      - name: use Kepler action to deploy cluster
        uses: sustainable-computing-io/kepler-action@main
        with:
          cluster_provider: existing
          prometheus_enable: true
          prometheus_operator_version: v0.13.0

      - name: Install Kepler helm chart
        run: |
          # Install helm binary first
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          export PATH=$PATH:/usr/local/bin
          helm repo add kepler https://sustainable-computing-io.github.io/kepler-helm-chart
          helm repo update
          helm install kepler kepler/kepler --namespace kepler --create-namespace --set serviceMonitor.enabled=true --set image.tag=latest

      - name: Allow prometheus to scrape kepler metrics in kepler namespace
        run: |
          curl -O https://raw.githubusercontent.com/sustainable-computing-io/kepler/main/manifests/k8s/config/rbac/prometheus_role.yaml
          sed -i 's/namespace: system/namespace: kepler/' prometheus_role.yaml
          kubectl apply -f prometheus_role.yaml
          kubectl apply -f - <<EOF
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            labels:
              app.kubernetes.io/component: prometheus
              app.kubernetes.io/instance: k8s
              app.kubernetes.io/name: prometheus
              sustainable-computing.io/app: kepler
            name: prometheus-k8s
            namespace: kepler
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: prometheus-k8s
          subjects:
          - kind: ServiceAccount
            name: prometheus-k8s
            namespace: monitoring
          EOF

      - name: Deploy Prometheus instance targeting only Kepler (also installs component for scraping kubelet-hosted cAdvisor)
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install kepler-kube-prom-stack prometheus-community/kube-prometheus-stack \
          --set kubeStateMetrics.enabled=false \
          --set nodeExporter.enabled=false \
          --set grafana.enabled=false \
          --set prometheusOperator.enabled=false \
          --set alertmanager.enabled=false \
          --set kubeApiServer.enabled=false \
          --set coreDns.enabled=false \
          --set kubeControllerManager.enabled=false \
          --set kubeEtcd.enabled=false \
          --set kubeProxy.enabled=false \
          --set kubeScheduler.enabled=false \
          --set-json 'prometheus.prometheusSpec.serviceMonitorSelector.matchLabels={"app.kubernetes.io/name":"kepler"}' \
          -n overhead --create-namespace \
          --wait
          kubectl wait --for=condition=Ready pod/prometheus-kepler-kube-prom-stack-kub-prometheus-0 -n overhead

      - name: Port forward prom
        run: |
          kubectl port-forward -n monitoring svc/prometheus-k8s 9090:9090 &
          kubectl port-forward -n overhead svc/kepler-kube-prom-stack-kub-prometheus 9091:9090 &

      - name: Clone Scalability Benchmark Suite
        run: |
          cd ~
          git clone https://github.com/sustainable-computing-io/scalability-benchmark-suite.git

      - name: Wait for Kepler metrics kepler_node_package_joules_total is not empty through Prometheus query
        run: |
          PROMETHEUS_URL=http://localhost:9091/api/v1/query ${GITHUB_WORKSPACE}/util/wait_for_prometheus.sh

      - name: Wait for overhead metrics container_cpu_usage_seconds_total is not empty through Prometheus query
        run: |
          QUERY=container_cpu_usage_seconds_total ${GITHUB_WORKSPACE}/util/wait_for_prometheus.sh
      
      - name: Run Benchmark
        run: |
          cd ~/scalability-benchmark-suite
          KEPLER_PROM_SERVER=http://localhost:9091 KEPLER_PROM_LABEL_MATCHER='pod=~"prometheus-kepler.*"' \
          MULTIPLE_KEPLER_PROM_INSTANCES=true KEPLER_LABEL_MATCHER='pod=~"kepler.*"' INCREMENT_INTERVAL=300 \
          RESULTS_DIR=./_output/results/ bash ./script.sh run_benchmark

      - name: Compress result directory
        run: |
          tar czf ~/results.tar.gz ~/scalability-benchmark-suite/_output/results/

      - name: Upload models as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: benchmark-results-${{ github.run_id }}
          path: ~/results.tar.gz
          retention-days: 30  